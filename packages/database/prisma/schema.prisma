generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model SignUpAttempt {
    attempts             Int      @default(0)
    emailAddress         String
    passwordHash         String
    token                String   @unique
    verificationCodeHash String
    createdAt            DateTime @default(now())
    expiresAt            DateTime
}

model User {
    id              String    @id
    firstName       String?
    lastName        String?
    emailAddress    String    @unique
    passwordHash    String
    verified        Boolean   @default(false)
    passwordEnabled Boolean
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    lastSignInAt    DateTime?

    sessions             Session[]
    workspaceMemberships WorkspaceMembership[]
    workspaceActivities  WorkspaceActivity[]
    workspaceInvitations WorkspaceInvitation[]
    boards               Board[]
    lists                List[]
    asAssignorTasks      Task[]                @relation(name: "assignor")
    asAssigneeTasks      Task[]                @relation(name: "assignee")
    notifications        Notification[]
}

model Session {
    id           String   @id
    userAgent    String   @default("unknown")
    ipAddress    String   @default("unknown")
    userId       String
    expiresAt    DateTime
    createdAt    DateTime @default(now())
    lastActiveAt DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
    id         String  @id
    strictMode Boolean @default(false)
    name       String

    memberships WorkspaceMembership[]
    activities  WorkspaceActivity[]
    invitations WorkspaceInvitation[]
    boards      Board[]
}

enum WorkspaceMemberRole {
    ADMIN
    GUEST
    MEMBER
}

model WorkspaceMembership {
    userId      String
    workspaceId String
    role        WorkspaceMemberRole
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt

    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, workspaceId])
}

model WorkspaceActivity {
    id          String   @id
    actorId     String
    workspaceId String
    message     String
    createdAt   DateTime @default(now())

    actor     User      @relation(fields: [actorId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model WorkspaceInvitation {
    userId      String
    workspaceId String
    role        WorkspaceMemberRole
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt

    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@id([userId, workspaceId])
}

model Board {
    id          String   @id
    creatorId   String
    workspaceId String
    title       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    lists List[]

    creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id])
}

model List {
    id        String   @id
    boardId   String
    creatorId String
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tasks Task[]

    creator User  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Task {
    id          String   @id
    listId      String
    assignorId  String
    assigneeId  String?
    title       String
    description String?
    dueDate     DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    list     List  @relation(fields: [listId], references: [id])
    assignor User  @relation(name: "assignor", fields: [assignorId], references: [id], onDelete: Cascade)
    assignee User? @relation(name: "assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
}

model Notification {
    id        String   @id
    userId    String
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
